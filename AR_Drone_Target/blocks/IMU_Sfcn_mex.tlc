%% File : IMU_Sfcn_mex.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for IMU_Sfcn_mex
%%
%% Simulink version      : 8.7 (R2016a) 10-Feb-2016
%% TLC file generated on : 18-Sep-2019 16:02:15

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'IMU_Sfcn_mex';
     def.InitializeConditionsFcnSpec = 'void MDL_IMU_start()';
     def.OutputFcnSpec = 'void MDL_IMU_step(IMU_Packets y1[1], int32 y2[1])';
     def.TerminateFcnSpec = 'void MDL_IMU_term()';
     def.HeaderFiles = {'IMU_Navdata.h'};
     def.SourceFiles = {'IMU_Navdata.c', 'IMU_Navdata_wrapper.c'};
     def.SrcPaths = {'.'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements IMU_Sfcn_mex "C"

%% Function: FcnGenerateUniqueFileName ====================================
%%
%function FcnGenerateUniqueFileName(filename, type) void
  %%
  %assign isReserved = TLC_FALSE
  %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
    %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
    %if (thisFile.Name==filename) && (thisFile.Type==type)
      %assign isReserved = TLC_TRUE
      %break
    %endif
  %endforeach
  %if (isReserved==TLC_TRUE)
    %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
  %endif
  %return filename
  %%
%endfunction

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %assign ver = FEVAL("ver", "simulink")
  %assign factor = 1.0
  %assign slVer = 0.0
  %foreach idx = SIZE(ver.Version)[1]
    %if ISEQUAL(ver.Version[idx], ".")
      %assign factor = factor/10.0
    %else
      %assign slVer = slVer + %<ver.Version[idx]>*factor
    %endif
  %endforeach

  %if GenerateErtSFunction==1 && slVer < 6.21
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
  %endif

  %if ExtMode==1 && slVer < 6.3
    %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
  %endif

  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel

    %if slVer < 6.21
      %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
    %endif

    %assign hFileName = FcnGenerateUniqueFileName("IMU_Sfcn_mex_wrapper", "header")
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif

    extern int IMU_Sfcn_mex_wrapper_allocmem(void** __y1BUS, int_T __y1Width);
    extern int IMU_Sfcn_mex_wrapper_freemem(void** __y1BUS);

    extern void IMU_Sfcn_mex_wrapper_initialize_conditions(void);

    extern void IMU_Sfcn_mex_wrapper_output(  void *y1, void *__y1BUS,  int32_T *y2);

    extern void IMU_Sfcn_mex_wrapper_terminate(void);

    #endif
    %closefile hFile

    %assign cFileName = FcnGenerateUniqueFileName("IMU_Sfcn_mex_wrapper", "source")
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <stdlib.h>
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "IMU_Navdata.h"

    int IMU_Sfcn_mex_wrapper_allocmem(void** __y1BUS, int_T __y1Width) {
      *__y1BUS = calloc(sizeof(IMU_Packets), __y1Width);
      if (*__y1BUS==NULL) return -1;

      return 0;
    }

    int IMU_Sfcn_mex_wrapper_freemem(void** __y1BUS) {
      if (*__y1BUS!=NULL) free(*__y1BUS);
      *__y1BUS = NULL;

      return 0;
    }

    void IMU_Sfcn_mex_wrapper_initialize_conditions(void) {


      MDL_IMU_start();

    }

    void IMU_Sfcn_mex_wrapper_output(  void *y1, void *__y1BUS,  int32_T *y2) {


      MDL_IMU_step( (IMU_Packets *) __y1BUS, y2);

      /*
       * Assign the Legacy Structure __y1BUS to the Simulink Structure y1
       */
      %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
      %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(IMU_Packets *)__y1BUS)", 0)>

    }

    void IMU_Sfcn_mex_wrapper_terminate(void) {


      MDL_IMU_term();

    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else

    %<LibAddToCommonIncludes("IMU_Navdata.h")>

  %endif

    %<SLibAddToStaticSources("IMU_Navdata.c")>
    %<SLibAddToStaticSources("IMU_Navdata_wrapper.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign y1BUS_pAddr = "&" + LibBlockPWork("", "", "", 0)
    %assign blockPath = STRING(LibGetBlockPath(block))
    if (IMU_Sfcn_mex_wrapper_allocmem(%<y1BUS_pAddr>, %<LibBlockOutputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;

  %endif 
  %%
%endfunction

%% Function: InitializeConditions  ========================================
%%
%function InitializeConditions (block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    IMU_Sfcn_mex_wrapper_initialize_conditions();
  %else 
   %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
   MDL_IMU_start();
  %endif 
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
    %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
    IMU_Sfcn_mex_wrapper_output( %<y1_ptr>, %<y1BUS_ptr>, %<y2_ptr>);
  %else 
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
    %%
    MDL_IMU_step( %<y1_ptr>, %<y2_ptr>);
  %endif 
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %%
    /* %<Type>(%<ParamSettings.FunctionName>): %<Name> */
    IMU_Sfcn_mex_wrapper_terminate();
    %assign y1BUS_pAddr = "&" + LibBlockPWork("", "", "", 0)
    %assign blockPath = STRING(LibGetBlockPath(block))
    if (IMU_Sfcn_mex_wrapper_freemem(%<y1BUS_pAddr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;

  %else 
   %%
    /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
   MDL_IMU_term();
  %endif 
  %%
%endfunction

%% [EOF]
